{"version":3,"sources":["components/stripe-button/stripe-button.component.jsx","components/checkout-item/checkout-item.styles.jsx","components/checkout-item/checkout-item.component.jsx","pages/checkout/checkout.styles.jsx","pages/checkout/checkout.component.jsx"],"names":["StripeCheckoutButton","price","priceForStripe","label","name","billingAddress","shippingAddress","image","description","amount","panelLabel","token","axios","url","method","data","then","res","alert","catch","err","console","log","JSON","parse","stripeKey","CheckoutItemDiv","styled","div","ImageDiv","TextDiv","span","QuantityDiv","RemoveButtonDiv","connect","dispatch","clearItem","item","clearItemFromCart","addItem","removeItem","cartItem","imageUrl","quantity","src","alt","onClick","CheckoutPageDiv","CheckoutHeaderDiv","HeaderBlockDiv","TotalDiv","WarningDiv","mapStateToProps","createStructuredSelector","cartItems","selectCartItems","total","selectCartTotal","map","key","id"],"mappings":"4MA4CeA,EAxCc,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACxBC,EAAyB,IAARD,EAuBvB,OACE,kBAAC,IAAD,CACEE,MAAM,UACNC,KAAK,qBACLC,gBAAc,EACdC,iBAAe,EACfC,MAAM,iCACNC,YAAW,yBAAoBP,GAC/BQ,OAAQP,EACRQ,WAAW,UACXC,MA9BY,SAAAA,GACdC,IAAM,CACJC,IAAK,WACLC,OAAQ,OACRC,KAAM,CACJN,OAAQP,EACRS,WAGHK,MACC,SAAAC,GAAG,OAAIC,MAAM,yBAEdC,OACC,SAAAC,GACEC,QAAQC,IAAI,iBAAmBC,KAAKC,MAAMJ,IAC1CF,MAAM,mDAgBRO,UAjCmB,sC,2wBCJlB,IAAMC,EAAkBC,IAAOC,IAAV,KAUfC,EAAWF,IAAOC,IAAV,KAURE,EAAUH,IAAOI,KAAV,KAIPC,EAAcL,YAAOG,EAAPH,CAAH,KAYXM,EAAkBN,IAAOC,IAAV,KCMbM,cACb,MAPyB,SAAAC,GAAQ,MAAK,CACtCC,UAAW,SAAAC,GAAI,OAAIF,EAASG,YAAkBD,KAC9CE,QAAS,SAAAF,GAAI,OAAIF,EAASI,YAAQF,KAClCG,WAAY,SAAAH,GAAI,OAAIF,EAASK,YAAWH,QAG3BH,EA3BM,SAAC,GAAkD,IAAhDO,EAA+C,EAA/CA,SAAUL,EAAqC,EAArCA,UAAWG,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,WAC5CpC,EAAoCqC,EAApCrC,KAAMsC,EAA8BD,EAA9BC,SAAUzC,EAAoBwC,EAApBxC,MAAO0C,EAAaF,EAAbE,SAC/B,OACE,kBAACjB,EAAD,KACE,kBAACG,EAAD,KACE,yBAAKe,IAAKF,EAAUG,IAAI,UAE1B,kBAACf,EAAD,KAAU1B,GACV,kBAAC4B,EAAD,KACE,yBAAKc,QAAS,kBAAMN,EAAWC,KAA/B,UACA,8BAAOE,GACP,yBAAKG,QAAS,kBAAMP,EAAQE,KAA5B,WAEF,kBAACX,EAAD,KAAU7B,GACV,kBAACgC,EAAD,CAAiBa,QAAS,kBAAMV,EAAUK,KAA1C,c,+4BC7BC,IAAMM,EAAkBpB,IAAOC,IAAV,KAcfoB,EAAoBrB,IAAOC,IAAV,KAQjBqB,EAAiBtB,IAAOC,IAAV,KASdsB,EAAWvB,IAAOC,IAAV,KAMRuB,EAAaxB,IAAOC,IAAV,KCajBwB,EAAkBC,YAAyB,CAC/CC,UAAWC,IACXC,MAAOC,MAGMvB,sBAAQkB,EAARlB,EArCM,SAAC,GAAD,IAAGoB,EAAH,EAAGA,UAAWE,EAAd,EAAcA,MAAd,OACnB,kBAACT,EAAD,KACE,kBAACC,EAAD,KACE,kBAACC,EAAD,KACE,0CAEF,kBAACA,EAAD,KACE,8CAEF,kBAACA,EAAD,KACE,2CAEF,kBAACA,EAAD,KACE,wCAEF,kBAACA,EAAD,KACE,0CAGHK,EAAUI,KAAI,SAAAjB,GAAQ,OACrB,kBAAC,EAAD,CAAckB,IAAKlB,EAASmB,GAAInB,SAAUA,OAE5C,kBAACS,EAAD,gBAAmBM,GACnB,kBAACL,EAAD,gEAEE,6BAFF,+CAKA,kBAAC,EAAD,CAAsBlD,MAAOuD","file":"static/js/7.47a6b098.chunk.js","sourcesContent":["import React from 'react';\r\nimport StripeCheckout from 'react-stripe-checkout';\r\nimport axios from 'axios';\r\n\r\nconst StripeCheckoutButton = ({ price }) => {\r\n  const priceForStripe = price * 100;\r\n  const publishableKey = 'pk_test_WBqax2FWVzS9QlpJScO07iuL';\r\n\r\n  const onToken = token => {\r\n    axios({\r\n      url: '/payment' ,\r\n      method: 'post' ,\r\n      data: {\r\n        amount: priceForStripe ,\r\n        token\r\n      }\r\n    })\r\n    .then( \r\n      res => alert('Payment Succesful!')\r\n    )\r\n    .catch(\r\n      err => {\r\n        console.log('Payment error:' , JSON.parse(err))\r\n        alert('There was an issue with your payment method')\r\n      }\r\n    )\r\n  };\r\n\r\n  return (\r\n    <StripeCheckout\r\n      label='Pay Now'\r\n      name='CRWN Clothing Ltd.'\r\n      billingAddress\r\n      shippingAddress\r\n      image='https://svgshare.com/i/CUz.svg'\r\n      description={`Your total is $${price}`}\r\n      amount={priceForStripe}\r\n      panelLabel='Pay Now'\r\n      token={onToken}\r\n      stripeKey={publishableKey}\r\n    />\r\n  );\r\n};\r\n\r\nexport default StripeCheckoutButton;\r\n","import styled from 'styled-components';\r\n\r\nexport const CheckoutItemDiv = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  min-height: 100px;\r\n  border-bottom: 1px solid darkgrey;\r\n  padding: 15px 0;\r\n  font-size: 20px;\r\n  align-items: center;\r\n`;\r\n\r\nexport const ImageDiv = styled.div`\r\n  width: 23%;\r\n  padding-right: 15px;\r\n\r\n  img {\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n`;\r\n\r\nexport const TextDiv = styled.span`\r\n  width: 23%;\r\n`;\r\n\r\nexport const QuantityDiv = styled(TextDiv)`\r\n  display: flex;\r\n\r\n  span {\r\n    margin: 0 10px;\r\n  }\r\n\r\n  div {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nexport const RemoveButtonDiv = styled.div`\r\n  padding-left: 12px;\r\n  cursor: pointer;\r\n`;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport {\r\n  clearItemFromCart,\r\n  addItem,\r\n  removeItem\r\n} from '../../redux/cart/cart.actions';\r\n\r\nimport {\r\n  CheckoutItemDiv,\r\n  ImageDiv,\r\n  TextDiv,\r\n  QuantityDiv,\r\n  RemoveButtonDiv\r\n} from './checkout-item.styles';\r\n\r\nconst CheckoutItem = ({ cartItem, clearItem, addItem, removeItem }) => {\r\n  const { name, imageUrl, price, quantity } = cartItem;\r\n  return (\r\n    <CheckoutItemDiv>\r\n      <ImageDiv>\r\n        <img src={imageUrl} alt='item' />\r\n      </ImageDiv>\r\n      <TextDiv>{name}</TextDiv>\r\n      <QuantityDiv>\r\n        <div onClick={() => removeItem(cartItem)}>&#10094;</div>\r\n        <span>{quantity}</span>\r\n        <div onClick={() => addItem(cartItem)}>&#10095;</div>\r\n      </QuantityDiv>\r\n      <TextDiv>{price}</TextDiv>\r\n      <RemoveButtonDiv onClick={() => clearItem(cartItem)}>\r\n        &#10005;\r\n      </RemoveButtonDiv>\r\n    </CheckoutItemDiv>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  clearItem: item => dispatch(clearItemFromCart(item)),\r\n  addItem: item => dispatch(addItem(item)),\r\n  removeItem: item => dispatch(removeItem(item))\r\n});\r\n\r\nexport default connect(\r\n  null,\r\n  mapDispatchToProps\r\n)(CheckoutItem);\r\n","import styled from 'styled-components';\r\n\r\nexport const CheckoutPageDiv = styled.div`\r\n  width: 55%;\r\n  min-height: 90vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin: 50px auto 0;\r\n\r\n  button {\r\n    margin-left: auto;\r\n    margin-top: 50px;\r\n  }\r\n`;\r\n\r\nexport const CheckoutHeaderDiv = styled.div`\r\n  width: 100%;\r\n  height: 40px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  border-bottom: 1px solid darkgrey;\r\n`;\r\n\r\nexport const HeaderBlockDiv = styled.div`\r\n  text-transform: capitalize;\r\n  width: 23%;\r\n\r\n  &:last-child {\r\n    width: 8%;\r\n  }\r\n`;\r\n\r\nexport const TotalDiv = styled.div`\r\n  margin-top: 30px;\r\n  margin-left: auto;\r\n  font-size: 36px;\r\n`;\r\n\r\nexport const WarningDiv = styled.div`\r\n  text-align: center;\r\n  margin-top: 40px;\r\n  font-size: 24px;\r\n  color: red;\r\n`;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\n\r\nimport StripeCheckoutButton from '../../components/stripe-button/stripe-button.component';\r\nimport CheckoutItem from '../../components/checkout-item/checkout-item.component';\r\n\r\nimport {\r\n  selectCartItems,\r\n  selectCartTotal\r\n} from '../../redux/cart/cart.selectors';\r\n\r\nimport {\r\n  CheckoutPageDiv,\r\n  CheckoutHeaderDiv,\r\n  HeaderBlockDiv,\r\n  TotalDiv,\r\n  WarningDiv\r\n} from './checkout.styles';\r\n\r\nconst CheckoutPage = ({ cartItems, total }) => (\r\n  <CheckoutPageDiv>\r\n    <CheckoutHeaderDiv>\r\n      <HeaderBlockDiv>\r\n        <span>Product</span>\r\n      </HeaderBlockDiv>\r\n      <HeaderBlockDiv>\r\n        <span>Description</span>\r\n      </HeaderBlockDiv>\r\n      <HeaderBlockDiv>\r\n        <span>Quantity</span>\r\n      </HeaderBlockDiv>\r\n      <HeaderBlockDiv>\r\n        <span>Price</span>\r\n      </HeaderBlockDiv>\r\n      <HeaderBlockDiv>\r\n        <span>Remove</span>\r\n      </HeaderBlockDiv>\r\n    </CheckoutHeaderDiv>\r\n    {cartItems.map(cartItem => (\r\n      <CheckoutItem key={cartItem.id} cartItem={cartItem} />\r\n    ))}\r\n    <TotalDiv>TOTAL: ${total}</TotalDiv>\r\n    <WarningDiv>\r\n      *Please use the following test credit card for payments*\r\n      <br />\r\n      4242 4242 4242 4242 - Exp: 01/20 - CVV: 123\r\n    </WarningDiv>\r\n    <StripeCheckoutButton price={total} />\r\n  </CheckoutPageDiv>\r\n);\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  cartItems: selectCartItems,\r\n  total: selectCartTotal\r\n});\r\n\r\nexport default connect(mapStateToProps)(CheckoutPage);\r\n"],"sourceRoot":""}